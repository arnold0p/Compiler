package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;

import rs.ac.bg.etf.pp1.ast.*;


parser code {:
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }
    
    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}


terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, COMMA, PRINT, RETURN, PLUS, EQUAL, VOID;
terminal READ, EXTENDS, FOR, BREAK, CONTINUE, NEW, IMPLEMENTS, ENUM, CLASS, INTERFACE, CONST;
terminal MINUS, MOD, EQ, NEQ, GT, GTE, LT, LTE, AND, OR, PLUS2, MINUS2, LSQUARE, RSQUARE, MUL, DIV;
terminal String BOOL;
terminal Character CHAR;
terminal Integer NUMBER;
terminal String IDENT, NULL;
terminal IF, ELSE;
terminal DOT;


nonterminal MethodDeclList;
nonterminal StatementList, Statement;


nonterminal DeclLists, DeclList, ConstDecls, ConstDecl, ConstDeclList;
nonterminal VarDecls, VarList, Vard;
nonterminal EnumDecls, EnumVarList, EnumVar;
nonterminal ClassDecl, Extends, Implements, TypeList, ClassMethods;
nonterminal VarDeclList;
nonterminal InterfaceDecl, InterfaceMethodDeclList, InterfaceMethodDecl;

nonterminal IfStatement, ForStatement, DesignatorStatementOpt, ConditionOpt;
nonterminal NumConstOpt, ActPars, ExprList;
nonterminal ActParsOpt;
nonterminal DesignatorSufixList, DesignatorSufix;
nonterminal Mulop, Relop, Addop;
nonterminal FormPars, FormalParamList, FormalParamDecl;
nonterminal DesignatorOrError, ConditionIf;
nonterminal VarDeclListC, VarDeclsC, VarListC, VardC;
nonterminal ForHeader, FuncName, MinusExpr, IfStmtJmp, ElseStmt;


nonterminal rs.etf.pp1.symboltable.concepts.Obj Program, ProgName, Designator, MethodDecl, MethodTypeName;
nonterminal rs.etf.pp1.symboltable.concepts.Obj EnumName, ClassName, InterfaceName, DesignatorName; 
nonterminal rs.etf.pp1.symboltable.concepts.Obj NewType;


nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Term, Expr, Factor, TypeVar, DesignatorStatement, AddopTermList; 
nonterminal rs.etf.pp1.symboltable.concepts.Struct ConstVar, CondFact, CondFactList, CondTermList, CondTerm, Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Struct MulopFactorList;


precedence left ELSE;

Program ::= (Program) PROG ProgName:p DeclLists LBRACE MethodDeclList RBRACE 
;

ProgName ::= (ProgName) IDENT:pName 
;

DeclLists ::= (DeclListsClass) DeclLists DeclList
			|
			(NoDeclListClass) /*e*/
;

DeclList  ::= (ConstDeclsClass) ConstDecls SEMI
			| 
			(VarDeclsClass) VarDecls
			|
			(EnumDeclsClass) EnumDecls
			|
			(ClassDeclClass) ClassDecl
			|
			(InterfaceDeclClass) InterfaceDecl
;


ConstDecls ::= (SingleConstDecls) CONST TypeVar ConstDeclList
;
				
ConstDeclList ::= (ConstDeclListClass) ConstDeclList COMMA ConstDecl
			|
			(SingleConstDeclListClass) ConstDecl
;
			
ConstDecl ::= (SingleConstDecl) IDENT:constName EQUAL ConstVar:constVar
			|
			(ErrorConst) error:e1
			{: parser.report_error("Uspesan oporavak od greske pri definisanju globalnih promenljivih, line : " + e1left, null); :}
;

ConstVar ::= (NumConstClass) NUMBER 
			|
			(CharConstClass) CHAR
			|
			(BoolConstClass) BOOL
;


EnumDecls ::= (EnumDecls) ENUM EnumName LBRACE EnumVarList RBRACE
;

EnumName ::= (EnumName) IDENT:enumName
;

EnumVarList ::= (EnumVarListClass) EnumVarList COMMA EnumVar
			|
			(SingleEnumVar) EnumVar
			;

EnumVar ::= (EnumVarIdent) IDENT:name
			|	
			(EnumVarIdentEqNum) IDENT:name EQUAL NUMBER:value
;


VarDeclList ::=(VarDeclListClass) VarDeclList VarDecls
			|
			(NoVarDeclList) /*e*/
;

VarDecls ::= (SingleVarDecls) TypeVar VarList SEMI
;

TypeVar ::= (TypeVar) Type:varType
;

VarList ::= (VarListClass) VarList COMMA Vard
			|
			(SingleVarClass) Vard
;

Vard ::= (VardClass) IDENT:VarName
		|
		(VardClassSquares) IDENT:VarName LSQUARE RSQUARE
		|
		(ErrorVard) error:e1
		{: parser.report_error("Uspesan oporavak od greske pri definisanju globalnih promenljivih, line : " + e1left, null); :}
;


ClassDecl ::= (ClassDecl) ClassName Extends Implements LBRACE VarDeclListC ClassMethods RBRACE
;


 
ClassName ::= (ClassName) CLASS IDENT:className
;

VarDeclListC ::= (VarDeclListCClass) VarDeclListC VarDeclsC
			|
			(NoVarDeclListC) /*e*/
;

VarDeclsC ::= (VardDeclsC) TypeVar VarListC SEMI
			|
			(VarErrorC1) error:e2 SEMI
			{: parser.report_error("Uspesan oporavak od greske pri deklaraciji polja klase, line : " + e2left, null); :}
			|
			(VarErrorC2) error:e3
			{: parser.report_error("Uspesan oporavak od greske pri deklaraciji polja klase, line : " + e3left, null); :}
;

VarListC ::= (VardListC) VarListC COMMA VardC
			|
			(SingleVardListC) VardC
;

VardC ::= (VardCClass) IDENT:VarName
		|
		(VardCSquares) IDENT:VarName LSQUARE RSQUARE
;

Extends ::= (ExtendsClass) EXTENDS Type
			|
			(NoExtends) /*e*/
			|
			(ErrorExtends) error:e
			{: parser.report_error("Uspesan oporavak od greske pri deklaraciji prosirenja klase, line : " + eleft, null); :}
;


Implements::= (ImplementsClass) IMPLEMENTS TypeList 
			|
			(NoImplements) /*e*/
;

TypeList ::= (TypeListClass) TypeList COMMA Type
			|
			(SingleTypeList) Type
;
			
ClassMethods ::= (ClassMethodsClass) LBRACE MethodDeclList RBRACE
				|
				(NoClassMethods) /*e*/
;

InterfaceDecl ::= (InterfaceDecl) INTERFACE InterfaceName LBRACE InterfaceMethodDeclList RBRACE
;

InterfaceName ::= (InterfaceName) IDENT:iName
;

InterfaceMethodDeclList::= (InterfaceMethodDeclListClass)InterfaceMethodDeclList InterfaceMethodDecl
						|
						(NoInterfaceMethodDeclList)/*e*/
;

InterfaceMethodDecl ::= (InterfaceMethodDecl) MethodTypeName LPAREN FormPars RPAREN SEMI
;

Type ::= (Type) IDENT:typeName 
;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDecl)/* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName
			   LPAREN FormPars RPAREN VarDeclList LBRACE StatementList RBRACE 
			   ;

MethodTypeName ::= (MethodTypeNameWithType)Type:retType IDENT:methName
				|
				(MethodTypeNameWithVoid) VOID IDENT:methName
;

FormPars ::= (FormParams) FormalParamList 
			| 
			(NoFormParam) /* epsilon */ ;

FormalParamList ::= (FormalParamDecls) FormalParamDecl COMMA FormalParamList
					|
					(SingleFormalParamDecl) FormalParamDecl
					;
					
FormalParamDecl ::= (FormalParam)Type IDENT:pName 
					|
					(FormalParamSquares)Type IDENT:pName LSQUARE RSQUARE
					|
					(ErrorFormalParam) error:e4
					{: parser.report_error("Uspesan oporavak od greske pri deklaraciji formalnih parametara funkcije, line : " + e4left, null); :}
					;

StatementList ::= (Statements) StatementList Statement 
					|
				  (NoStmt) /* epsilon */
				  ;

Statement ::= (DesignatorStmt) DesignatorStatement SEMI
			| 
			 (IfStmt) IfStatement
			 |
			 (ForStmt) ForStatement
			 |
			 (BreakStmt) BREAK SEMI
			 |
			 (ContinueStmt)CONTINUE SEMI
			 |
			 (ReturnSmt) RETURN Expr SEMI
			 |
			 (ReturnVoid) RETURN SEMI
			 |
			 (ReadStmt)READ LPAREN Designator RPAREN SEMI
			 |
			 (PrintStmt)PRINT LPAREN Expr NumConstOpt RPAREN SEMI 
			 |
			 (ListStmt) LBRACE StatementList RBRACE
			 ;

IfStatement ::= (If) IF ConditionIf IfStmtJmp 
			| 
			(IfElse) IF ConditionIf IfStmtJmp ELSE ElseStmt
			;
	
IfStmtJmp ::= (IfStmtJmp) Statement
;
	
ElseStmt ::= (ElseStmt) Statement
;

ConditionIf ::= (ConditionIfClass) LPAREN Condition RPAREN
				|
				(ErrorConditionIF) error:e5 RPAREN
				{: parser.report_error("Uspesan oporavak od greske u logickom iskazu if naredbe, line : " + e5left, null); :}		
;

ForStatement ::= (ForStatement) ForHeader Statement
;			

ForHeader ::= (ForHeader) FOR LPAREN DesignatorStatementOpt SEMI ConditionOpt SEMI DesignatorStatementOpt RPAREN
;	  

ConditionOpt ::= (ConditionOptClass) Condition
				|
				(NoConditionOpt) /*e*/
				;
	  
DesignatorStatementOpt ::= (DesignatorStmtOpt) DesignatorStatement
						|
						(NoDesignatorStmtOpt)/*e*/
						;


NumConstOpt ::= (NumConstOptClass) COMMA NUMBER
				|
				(NoNumConstOpt) /*e*/
				;			
		
		
DesignatorStatement ::= (DesignatorStmtFunc) FuncName LPAREN ActParsOpt RPAREN
					|
					(DesignatorStmtPlus2) Designator PLUS2
					|
					(DesignatorStmtMinus2) Designator MINUS2
					|
					(DesignatorStmtAssign) DesignatorOrError
						
;

FuncName ::= (FuncName) Designator
;

DesignatorOrError ::= (Assign) Designator EQUAL Expr 
					|
					(ErrorAssign) error:e6 
					{: parser.report_error("Uspesan oporavak od greske pri dodeli vrednosti, line : " + e6left, null); :}	
				
;

ActParsOpt ::=  (ActParsOptClass) ActPars 
			|
			(NoActParsOpt)/*e*/
;

ActPars ::= (ActPars) ExprList
;

ExprList ::= (ExprListClass) Expr COMMA ExprList
			|
			(SingleExpr) Expr
;

Condition ::= (Condition) CondTerm CondTermList
;
		
CondTermList ::= (CondTermListClass) CondTermList OR CondTerm 
				|
				(NoCondTermList) /*e*/
;

CondTerm ::= (CondTerm) CondFact CondFactList
;

CondFactList ::= (CondFactListClass) CondFactList AND CondFact
				|
				(NoCondFactList) /*e*/
				;

CondFact ::= (CondFactExpr) Expr 
			| 
			(CondFactExprRelopExpr) Expr Relop Expr
;

Expr ::= (ExprNoMinus) Term AddopTermList
		|
		(ExprMinus) MinusExpr Term AddopTermList
;
				
			
MinusExpr ::= (MinusExpr) MINUS
;


AddopTermList ::= (AddopTermListClass) AddopTermList Addop Term
				|
				(NoAddopTermList) /*e*/
				;
	
Term ::= (Term) Factor MulopFactorList
;	

MulopFactorList ::= (MulopFactorListClass) MulopFactorList Mulop Factor
				|
				(NoMulopFactorList) /*e*/
;
	
Factor ::=	(DesignatorFact) Designator:dName
			|
			(FactorFuncCall) FuncName LPAREN ActParsOpt RPAREN
			|
			(NumFact) NUMBER
			|
			(CharFact) CHAR
			|
			(BoolFact) BOOL
			|
			(NewFact) NEW NewType 
			|
			(NewFactSquare) NEW Type LSQUARE Expr RSQUARE
			|
			(ExprFact) LPAREN Expr RPAREN
			|
			(NullFact) NULL
;
	
NewType ::= (NewType) Type
;


Designator ::= (Designator) DesignatorName DesignatorSufixList
;

DesignatorName ::= (DesignatorName) IDENT:name
;
  
DesignatorSufixList ::= (DesignatorSufixListClass) DesignatorSufix DesignatorSufixList 
					|
					(NoDesignatorSufixList) /*e*/
;

DesignatorSufix ::= (DesignatorSufixDot) DOT IDENT:name
					|
					(DesignatorSufixSquare) LSQUARE Expr RSQUARE
;

Relop ::=(Eq) EQ
		|
		(Neq) NEQ
		|
		(Gt) GT
		|
		(Gte) GTE
		|
		(Lt) LT
		|
		(Lte) LTE
;

Addop ::= (Plus) PLUS 
		|
		(Minus) MINUS
		;

Mulop ::= (Mul)  MUL
		|
		(Div) DIV
		|
		(Mod) MOD
;
